import groovy.json.JsonBuilder
import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
    id 'maven-publish'
    id 'java'
    id 'eclipse'
    id 'idea'
}


version = "0.3.2"
if (System.getenv().BUILD_NUMBER != null) version += "." + System.getenv().BUILD_NUMBER

subprojects {
    version = rootProject.version
}

ext.getChangeLog = { ->
    def outStream = new ByteArrayOutputStream()
    exec {
        executable = 'git'
        args = ['log', '-n', '1', "--format='%B'"]
        standardOutput = outStream
    }
    return outStream.toString().replaceAll("^\\s*'\\s*|\\s*'\\s*\$", "").replaceAll("[\\r\\n]+", "\n")
}

evaluationDependsOnChildren()


java {
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}


allprojects {
    group = "net.dries007.mclink"
    archivesBaseName = "MCLink"
    apply plugin: 'maven-publish'
//    sourceCompatibility = targetCompatibility = "1.8"
//    compileJava {
//        sourceCompatibility = targetCompatibility = "1.8"
//    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.guava:guava:17.0'
    implementation 'com.google.code.gson:gson:2.2.4'
    implementation 'org.apache.logging.log4j:log4j-core:2.0-beta9'
    implementation 'org.jetbrains:annotations:15.0'
}

//noinspection GroovyAssignabilityCheck
task setupDecompWorkspace
//noinspection GroovyAssignabilityCheck
task setupDevWorkspace
//noinspection GroovyAssignabilityCheck
task setupCiWorkspace

//noinspection GroovyAssignabilityCheck
project.tasks.withType(Jar) { jarTask ->
    jarTask.appendix = 'lib'
}

subprojects {

    version = rootProject.version

    dependencies {
        implementation rootProject
    }

    sourceSets.main.resources.srcDirs += rootProject.sourceSets.main.resources.srcDirs

    jar {
        //noinspection GroovyAssignabilityCheck
        duplicatesStrategy = 'exclude'
        from rootProject.sourceSets.main.output
    }

    if (project.hasProperty('minecraft')) {
        java {
            withSourcesJar()
        }

        sourcesJar {
            duplicatesStrategy = 'exclude'
            from rootProject.sourceSets.main.allSource
        }

        //noinspection GroovyAssignabilityCheck
        project.tasks.withType(Jar) { jarTask ->
            jarTask.duplicatesStrategy = 'exclude'
            jarTask.appendix = 'Forge-' + project.MC_VERSION
        }


        processResources {
            inputs.property "version", project.version
            inputs.property "mcversion", project.MC_VERSION

            filesMatching('META-INF/mods.toml') {
                expand 'version': project.version, 'mcversion': project.MC_VERSION
            }

            doLast {
                //noinspection GroovyAssignabilityCheck
                def updateFile = new File(project.archivesBaseName.toLowerCase() + '.json')
                def json
                if (updateFile.exists()) {
                    json = new JsonSlurper().parseText(updateFile.getText())
                } else {
                    def builder = new JsonBuilder()
                    json = builder(homepage: "https://mclink.dries007.net", promos: new HashMap<>())
                }
                //noinspection GroovyAssignabilityCheck
                json['promos'][project.MC_VERSION + '-latest'] = project.version
                //noinspection GroovyAssignabilityCheck
                json['promos'][project.MC_VERSION + '-recommended'] = project.version
                if (!json.containsKey(project.MC_VERSION)) json.put(project.MC_VERSION, new HashMap<>())
                //noinspection GroovyAssignabilityCheck
                def version = json[project.MC_VERSION]
                version.put(project.version, getChangeLog())
                updateFile.write JsonOutput.prettyPrint(JsonOutput.toJson(json))
            }
        }

        rootProject.setupDecompWorkspace.dependsOn setupDecompWorkspace
        rootProject.setupDevWorkspace.dependsOn setupDevWorkspace
        rootProject.setupCiWorkspace.dependsOn setupCiWorkspace
    } else {
        //noinspection GroovyAssignabilityCheck
        project.tasks.withType(Jar) { jarTask ->
            jarTask.appendix = project.name
        }
    }

    rootProject.build.dependsOn build
}
